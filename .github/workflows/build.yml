name: build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        target:
          - win64
          - macos64
          - linux64
        include:
          - target: win64
            os: ubuntu-22.04
          - target: macos64
            os: macos-latest
          - target: linux64
            os: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install depot_tools
        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $HOME/depot_tools
          echo "$HOME/depot_tools" >> $GITHUB_PATH

      - name: Cache windows sdk
        id: cache-windows-sdk
        if: matrix.target == 'win64'
        uses: actions/cache@v3
        with:
          path: .xwin-cache
          key: xwin-cache

      - name: Download windows sdk
        if: matrix.target == 'win64' && steps.cache-windows-sdk.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/Jake-Shadle/xwin/releases/download/0.2.0/xwin-0.2.0-x86_64-unknown-linux-musl.tar.gz > $HOME/xwin.tar.gz
          tar -xvf $HOME/xwin.tar.gz -C $HOME
          sudo mv $HOME/xwin-0.2.0-x86_64-unknown-linux-musl/xwin /usr/bin
          xwin --accept-license splat --include-debug-libs

      - name: Install ninja
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build

      - name: Install windows dependencies
        if: matrix.target == 'win64'
        run: |
          sudo apt-get install clang-14 clang-tools-14 llvm-14 lld-14

      - name: Install linux dependencies
        if: matrix.target == 'linux64'
        run: |
          sudo apt-get install libxrandr-dev libxinerama-dev libx11-dev libxcursor-dev libxi-dev \
            libxext-dev libxcb-shm0-dev libxtst-dev libx11-xcb-dev

      - name: Setup cmake toolchain for windows
        if: matrix.target == 'win64'
        run: |
          echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/WinMsvc.cmake" >> $GITHUB_ENV
          echo "LLVM_NATIVE_TOOLCHAIN=/usr/lib/llvm-14" >> $GITHUB_ENV
          echo "XWIN_CACHE=${{ github.workspace }}/.xwin-cache" >> $GITHUB_ENV

      - name: Build dawn
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"
        run: ./scripts/build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dawn-static-${{ matrix.target }}
          path: |
            build/gen/**/*
            build/lib/**/*

  release:
    runs-on: ubuntu-20.04
    needs: build
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Create git tag
        id: create-git-tag
        run: |
          tag="autobuild-$(date -u '+%Y-%m-%d-%H-%M')"
          git tag $tag
          git push origin $tag
          echo "::set-output name=TAG::$tag"
          echo "::set-output name=COMMIT::$(git --git-dir dawn/.git rev-parse HEAD)"

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Prepare artifacts
        run: |
          for target in win64 macos64 linux64; do
            echo "${{ steps.create-git-tag.outputs.COMMIT }}" > dawn-static-$target/COMMIT
            tar -czvf dawn-static-$target.tar.gz dawn-static-$target/*
          done

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release create ${{ steps.create-git-tag.outputs.TAG }} dawn-static-*.tar.gz \
            -n "dawn@${{ steps.create-git-tag.outputs.COMMIT }}"
